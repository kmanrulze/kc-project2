using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Dbnd.Logic.Objects
{
    public class Game
    {
        public Guid GameID { get; set; }

        // 3-20 alphanumeric . _ chars
        // . and _ can not be leading or trailing
        // no double . _
        public string GameName { get; set; }
        public Guid ClientID { get; set; }
        //Characters in game
        public List<Character> Characters { get; set; }
        // Overviews in game
        public List<Overview> Overviews { get; set; }

        public Game(Guid clientID, string gameName)
        {
            GameID = Guid.NewGuid();
            ClientID = clientID;
            GameName = gameName;
            GameCharacters = new List<Character>();
        }

        public Game() { }
        // 'Not Null' checks for properties that are not autogenerated
        public bool RequiredFieldsNotNull()
        {
            if (String.IsNullOrEmpty(GameName))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        // Valid GameName checks
        // 6-20 alphanumeric . _ chars
        // . and _ can not be leading or trailing
        // no double . _
        public bool IsValidGameName()
        {
            Regex regex = new Regex(@"^(?=.{3,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$", RegexOptions.None, TimeSpan.FromMilliseconds(2000));
            Match match = regex.Match(GameName);
            if (match.Success)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
